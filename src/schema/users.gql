type User {
    uid: ID!
    fullName: String!
    username: String!
    createdAt: DateTimeISO!
    #    posts: [Post!]!
}

type LoginUser {
    user: User!
    accessToken: String!
    refreshToken: String!
}

input UserInput {
    fullName: String!
    username: String!
    password: String!
}

type UserExists {
    message: String!
    username: String!
}

type PasswordIncorrect {
    message: String!
}

union UserResults = User | BadUserInput | NotFound | Unauthorized | Forbidden | InternalServerError
union CreateUserResults = User | UserExists | BadUserInput | InternalServerError | PasswordIncorrect
union LoginUserResults = LoginUser | BadUserInput | NotFound | Unauthorized | Forbidden | InternalServerError

type Query {
    getUser: UserResults @auth
}

type Mutation {
    createUser(form:UserInput!): CreateUserResults
    login(username: String!, password: String!): LoginUserResults
}